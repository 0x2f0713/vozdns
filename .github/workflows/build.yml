name: Build Cross-Platform Binaries

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: write
  packages: write

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin, freebsd]
        goarch: [amd64, arm64]
        exclude:
          # Exclude unsupported combinations
          - goos: windows
            goarch: arm64
          - goos: freebsd
            goarch: arm64
        include:
          # Add ARM for Linux
          - goos: linux
            goarch: arm
          # Add 386 for Windows and Linux
          - goos: windows
            goarch: 386
          - goos: linux
            goarch: 386

    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        CGO_ENABLED: 0
      run: |
        # Set binary name with extension for Windows
        BINARY_NAME="vozdns"
        if [ "$GOOS" = "windows" ]; then
          BINARY_NAME="vozdns.exe"
        fi
        
        # Create output directory
        OUTPUT_DIR="dist/${GOOS}_${GOARCH}"
        mkdir -p "$OUTPUT_DIR"
        
        # Build the binary
        go build -a -ldflags '-extldflags "-static"' -o "$OUTPUT_DIR/$BINARY_NAME" .
        
        # Create archive
        if [ "$GOOS" = "windows" ]; then
          cd "$OUTPUT_DIR" && zip "../vozdns_${GOOS}_${GOARCH}.zip" "$BINARY_NAME"
        else
          cd "$OUTPUT_DIR" && tar -czf "../vozdns_${GOOS}_${GOARCH}.tar.gz" "$BINARY_NAME"
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: vozdns-${{ matrix.goos }}-${{ matrix.goarch }}
        path: |
          dist/*.tar.gz
          dist/*.zip
        retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: Prepare release assets
      run: |
        mkdir -p release
        find artifacts -name "*.tar.gz" -o -name "*.zip" | xargs -I {} cp {} release/
        ls -la release/
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: release/*
        draft: false
        prerelease: false
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run go fmt check
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "The following files are not formatted:"
          gofmt -s -l .
          exit 1
        fi
